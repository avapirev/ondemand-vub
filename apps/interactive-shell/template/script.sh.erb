#!/usr/bin/bash -l

<%= ERB.new(File.read('../common_files/work_directory_change.sh.erb'), eoutvar: 'child').result(binding) %>

# Unset bash timeout
unset TMOUT

# Set Font Size
fsize="<%= context.advanced_font_size %>"

# Define tmux socket name
export TSOCK="$TMPDIR/J${SLURM_JOB_ID}.sock"

# Define tmux session name
export TSES="Job-${SLURM_JOB_ID}"

# Define bundled config file
export TCONF_BUNDLE="${OOD_SESSION_STAGED_ROOT}/tmux.conf"
export TCONF="$TCONF_BUNDLE"

# Create pass File (passwd generated in before.sh)
if [ -z "$password" ]; then
    echo "ERROR: Empty password"
    exit 5
fi

echo "ttyd:$password" > "${OOD_SESSION_STAGED_ROOT}/ttyd.pass"

# set the TERM
export TERM="xterm-256color"

CUSTOM="$(dirname "${BASH_SOURCE[0]}")/custom.sh"

if [ -f "$CUSTOM" ]; then
    source $CUSTOM
fi

realtmux="${OOD_SESSION_STAGED_ROOT}/real_start_tmux.sh"
cat > $realtmux <<EORS
#!/bin/bash
tmux <% if context.advanced_tmux_config.to_s == "1" %> -f "$TCONF"<% end %> \
           -S "$TSOCK" \
           new \
           -A \
           -s "$TSES"
EORS

chmod +x "$realtmux"

# keep spaces in the "no valid password"
ttydtmux="${OOD_SESSION_STAGED_ROOT}/ttyd_start_tmux.sh"
cat > "$ttydtmux" <<EOF
#!/bin/bash
if [ "\$#" -eq 1 ] && [ "\${1:-no valid password}" == "$password" ] ; then
    $realtmux
else
    echo "Access denied"
	while true; do sleep infinity; done
fi
EOF

chmod +x "$ttydtmux"

# wait for tmux socket
# name must match one in after.sh
waitfor="$OOD_SESSION_STAGED_ROOT/waitfor_tmux.sh"
   cat > "$waitfor" <<EOWFS
#!/bin/bash
until [ -e "$TSOCK" ]; do
     sleep 1
done
EOWFS

# optionally, wait for any tmux wait-for is released
if [ -n "$TMUX_WAITFOR" ]; then
   cat >> "$waitfor" <<EOWFF
tmux -S "$TSOCK" wait-for "$TMUX_WAITFOR"
EOWFF

fi

chmod +x "$waitfor"

#exec prerun
<%- unless context.global_prerun.empty? -%>
<%= context.global_prerun.gsub("\r", "") %>
<%- end -%>

# Launch tmux
echo "TIMING - Starting tmux at: $(date)"

# already start tmux, don't wait till a connection is made to ttyd
echo "backgrounding tmux"
$realtmux &
echo "backgrounded tmux pid $!"

ttyd -p "${port}" -b "/node/${host}/${port}" -W \
    -t "fontSize=$fsize" \
    -t cursorStyle=underline -t cursorBlink=true \
    -t 'theme={"background": "#282a36", "foreground": "#f8f8f2"}' \
    -a \
    "$ttydtmux"

# kill tmux session
tmux kill-server || true

# End
echo "TIMING - End tmux at: $(date)"
